package test.GameTest;

import model.Board;
import model.ColorDefinition;
import model.EmptyBagException;
import model.Piece;
import model.TileBag;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

class BoardTest {

	private Board b;
	private TileBag tilebag;

	@BeforeEach
	public void setup() {
		this.b = new Board();
		this.tilebag = new TileBag(36);
		tilebag.populateBag();
	}

	/**
	 * Test if isValidLocation is working as expected
	 */
	@Test
	void testValidLocation() {
		assertTrue(b.isValidLocation(0));
		assertTrue(b.isValidLocation(35));
		assertFalse(b.isValidLocation(40));
	}

	/**
	 * Test if location is empty
	 * 
	 * @throws EmptyBagException
	 */
	@Test
	void testIsEmptyLocation() throws EmptyBagException {
		assertTrue(b.isEmptyLocation(0));
		b.movePiece(0,  tilebag.takeRandomPiece());
		assertFalse(b.isEmptyLocation(0));
	}

	/**
	 * Test bonusQuotients generated by Board class and BoardLocation class
	 */
	@Test
	void testBonusQuotients() {
		assertEquals(1, b.getBoardLocation(0).getScorePoint());
		assertEquals(2, b.getBoardLocation(10).getScorePoint());
		assertEquals(3, b.getBoardLocation(2).getScorePoint());
		assertEquals(4, b.getBoardLocation(11).getScorePoint());
	}

	/**
	 * Test if takePiece() method of Board works
	 * 
	 * @throws EmptyBagException
	 */
	@Test
	void testGetPiece() throws EmptyBagException {
		Object a = tilebag.takeRandomPiece();
		b.movePiece(0, (Piece) a);
		assertNotNull(b.getPiece(0));
		assertEquals(b.getPiece(0), a);
	}

	/**
	 * Test if setMove() method works properly
	 * 
	 * @throws EmptyBagException
	 */
	@Test
	void testMovePiece() throws EmptyBagException {
		assertTrue(b.isEmptyLocation(1));
		b.movePiece(1,  tilebag.getBag().get(0));
		assertEquals(b.getPiece(1), b.getBoardLocation(1).getPiece());
		assertFalse(b.isEmptyLocation(1));
	}

	@Test
	void testGetPotentialMoveScore() throws EmptyBagException {
		Piece a =  tilebag.takeRandomPiece();
		assertEquals(b.getPotentialMoveScore(0, (Piece) a), ((Piece) a).getValue());
		Object b2 = tilebag.takeRandomPiece();
		assertEquals(b.getPotentialMoveScore(0, (Piece) b2), ((Piece) b2).getValue());
		assertEquals(0, b.getPotentialMoveScore(100, (Piece) a));
	}

	/**
	 * Test validity of a move
	 * 
	 * @throws EmptyBagException
	 */
	@Test
	void testIsValidMove() throws EmptyBagException {
		assertFalse(b.isValidMove(10,  tilebag.getBag().get(0)));
		assertTrue(b.isValidMove(0, tilebag.takeRandomPiece()));

		Piece p1 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p2 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p3 = new Piece(ColorDefinition.BLUE, ColorDefinition.RED, ColorDefinition.PURPLE, 2);
		Piece p4 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);
		Piece p5 = new Piece(ColorDefinition.BLUE, ColorDefinition.YELLOW, ColorDefinition.GREEN, 1);

		assertTrue(b.isValidMove(0, p1));

		b.movePiece(0, p1);

		assertFalse(b.isValidMove(2, p5));
		assertTrue(b.isValidMove(2, p4));

		b.movePiece(2, p4);
		assertTrue(b.isValidMove(3, p5));
		assertTrue(b.isValidMove(3, p2));
		assertTrue(b.isValidMove(3, p3));

	}

	@Test
	void testGetIndex() {
		assertEquals(8, b.getIndex(2, 2));
		assertEquals(24, b.getIndex(4, 4));
	}

	@Test
	void testGetCoordinate() {
		ArrayList<Integer> tuple = new ArrayList<>();
		ArrayList<Integer> tuple2 = new ArrayList<>();
		tuple.add(2);
		tuple.add(2);
		assertEquals(tuple, b.getCoordinate(8));
		tuple2.add(4);
		tuple2.add(4);
		assertEquals(tuple2, b.getCoordinate(24));
	}

	@Test
	void testIsValidColor() {
		Piece p1 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p2 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p3 = new Piece(ColorDefinition.BLUE, ColorDefinition.RED, ColorDefinition.PURPLE, 2);
		Piece p4 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);
		Piece p5 = new Piece(ColorDefinition.BLUE, ColorDefinition.YELLOW, ColorDefinition.GREEN, 1);
		
		assertTrue(b.isValidColor(0, p2));
		b.movePiece(0, p1);
		assertTrue(b.isValidColor(2, p3));
		assertFalse(b.isValidColor(2, p5));
		b.movePiece(2, p5);
		assertFalse(b.isValidColor(1, p4));
		
		assertTrue(b.isValidColor(2, p3));
		Board testB = new Board();
		testB.movePiece(30, p2);
		assertTrue(b.isValidColor(20, p2));

	}
	
	@Test
	void testGetLeftPiece() {
		
		Piece p1 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p2 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p3 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);


		b.movePiece(0, p2);
		b.movePiece(2, p3);
		b.movePiece(1, p3);
		b.movePiece(3, p3);
		b.movePiece(6, p1);
		
		try {
			//assertEquals(p3, b.getLeftPiece(2));
			assertTrue(p3.equals(b.getLeftPiece(2)));
			
		} catch (Exception e) {
			
		}
		try {
			//assertEquals(p2, b.getLeftPiece(3));
			assertTrue(p3.equals(b.getLeftPiece(3)));
		} catch (Exception e) {
			
		}
		
		try {
			assertNull(b.getLeftPiece(31));
		} catch (Exception e) {
			
		}
	}

	
	@Test
	void testGetRightPiece() {
		
		Piece p1 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p2 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p3 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);


		b.movePiece(0, p2);
		b.movePiece(2, p3);
		b.movePiece(1, p3);
		b.movePiece(3, p3);
		b.movePiece(6, p1);
		
		try {
			//assertEquals(p3, b.getLeftPiece(2));
			assertTrue(p3.equals(b.getRightPiece(2)));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			//assertEquals(p2, b.getLeftPiece(3));
			assertTrue(p3.equals(b.getRightPiece(1)));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	void testBottomPiece() {
		
		Piece p1 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p2 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p3 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);


		b.movePiece(0, p2);
		b.movePiece(2, p3);
		b.movePiece(1, p3);
		b.movePiece(3, p3);
		b.movePiece(7, p1);
		
		try {
			//assertEquals(p3, b.getLeftPiece(2));
			assertTrue(p3.equals(b.getBottomPiece(0)));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			//assertEquals(p2, b.getLeftPiece(3));
			assertTrue(p1.equals(b.getBottomPiece(3)));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	void testTopPiece() {
		
		Piece p1 = new Piece(ColorDefinition.WHITE, ColorDefinition.WHITE, ColorDefinition.WHITE, 1);
		Piece p2 = new Piece(ColorDefinition.RED, ColorDefinition.RED, ColorDefinition.RED, 6);
		Piece p3 = new Piece(ColorDefinition.GREEN, ColorDefinition.RED, ColorDefinition.PURPLE, 1);


		b.movePiece(0, p2);
		b.movePiece(2, p3);
		b.movePiece(1, p3);
		b.movePiece(3, p3);
		b.movePiece(7, p1);
		
		try {
			//assertEquals(p3, b.getLeftPiece(2));
			assertTrue(p2.equals(b.getTopPiece(2)));
			
		} catch (Exception e) {

		}
		try {
			//assertEquals(p2, b.getLeftPiece(3));
			assertTrue(p3.equals(b.getTopPiece(7)));
		} catch (Exception e) {

		}
	}
	
	@Test
	void testBoardIsEmpty() throws EmptyBagException {
		assertTrue(b.boardIsEmpty());
		b.movePiece(0, tilebag.getBag().get(0));
		assertNotNull(b.getBoardLocation(0));
	}
	
	@Test
	void testGetBoardLocation() {
		assertNotNull(b.getBoardLocation(0));
		assertNull(b.getBoardLocation(100));
	}
	
	@Test
	void testToPrinterString() {
		String printed = b.toPrinterString();
		assertNotNull(printed);
	}
	

}
